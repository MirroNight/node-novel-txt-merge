#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const path = require("path");
const index_1 = require("../index");
const PACKAGE_JSON = require("../package.json");
const updateNotifier = require("update-notifier");
const debug_color2_1 = require("debug-color2");
const console = new debug_color2_1.Console(null, {
    enabled: true,
    inspectOptions: {
        colors: true,
    },
    chalkOptions: {
        enabled: true,
    },
});
console.enabledColor = true;
const CWD = process.cwd();
updateNotifier({
    pkg: PACKAGE_JSON,
}).notify();
let cli = yargs
    .default({
//input: process.cwd(),
})
    .option('input', {
    alias: ['i'],
    //demandOption: true,
    requiresArg: true,
    normalize: true,
    type: 'string',
    desc: 'source novel txt folder path',
})
    .option('output', {
    alias: ['o'],
    //demandOption: true,
    requiresArg: true,
    normalize: true,
    type: 'string',
    desc: ' output path',
    default: function () {
        return CWD;
    },
})
    .option('zh', {
    //default: true,
    boolean: true,
})
    // @ts-ignore
    .command('$0', '', function (yargs) {
    if (yargs.argv.zh) {
        yargs.locale('zh_CN');
    }
    let inputPath = yargs.argv.input || yargs.argv._[0] || CWD;
    let outputPath = yargs.argv.output;
    if (!path.isAbsolute(inputPath)) {
        inputPath = path.join(CWD, inputPath);
    }
    if (!path.isAbsolute(outputPath)) {
        outputPath = path.join(CWD, outputPath);
    }
    console.log(`currentPath:\n  `, inputPath);
    console.log(`inputPath:\n  `, inputPath);
    console.log(`outputPath:\n  `, outputPath);
    if (inputPath.indexOf(__dirname) == 0 || outputPath.indexOf(__dirname) == 0) {
        console.error(`[FAIL] path not allow`);
        yargs.showHelp();
        process.exit(1);
        return;
    }
    console.log(`\n`);
    //console.log(666, yargs.argv);
    return index_1.default(inputPath, outputPath);
    //yargs.showHelp('log');
})
    .version()
    //.help()
    .argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG1wLW5weC10eHQtbWVyZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0bXAtbnB4LXR4dC1tZXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSwrQkFBZ0M7QUFDaEMsNkJBQThCO0FBRTlCLG9DQUFnQztBQUNoQyxnREFBaUQ7QUFDakQsa0RBQW1EO0FBQ25ELCtDQUF1QztBQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLHNCQUFPLENBQUMsSUFBSSxFQUFFO0lBQ2pDLE9BQU8sRUFBRSxJQUFJO0lBQ2IsY0FBYyxFQUFFO1FBQ2YsTUFBTSxFQUFFLElBQUk7S0FDWjtJQUNELFlBQVksRUFBRTtRQUNiLE9BQU8sRUFBRSxJQUFJO0tBQ2I7Q0FDRCxDQUFDLENBQUM7QUFFSCxPQUFPLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUU1QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsY0FBYyxDQUFDO0lBQ2QsR0FBRyxFQUFFLFlBQVk7Q0FDakIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRVosSUFBSSxHQUFHLEdBQUcsS0FBSztLQUNiLE9BQU8sQ0FBQztBQUNSLHVCQUF1QjtDQUN2QixDQUFDO0tBQ0QsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNoQixLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUM7SUFDWixxQkFBcUI7SUFDckIsV0FBVyxFQUFFLElBQUk7SUFDakIsU0FBUyxFQUFFLElBQUk7SUFDZixJQUFJLEVBQUUsUUFBUTtJQUNkLElBQUksRUFBRSw4QkFBOEI7Q0FPcEMsQ0FBQztLQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7SUFDakIsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ1oscUJBQXFCO0lBQ3JCLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsY0FBYztJQUNwQixPQUFPLEVBQUU7UUFFUixPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7Q0FDRCxDQUFDO0tBQ0QsTUFBTSxDQUFDLElBQUksRUFBRTtJQUNiLGdCQUFnQjtJQUNoQixPQUFPLEVBQUUsSUFBSTtDQUNiLENBQUM7SUFDRixhQUFhO0tBQ1osT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsVUFBVSxLQUFLO0lBRWpDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQ2pCO1FBQ0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN0QjtJQUVELElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztJQUMzRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUVuQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFDL0I7UUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDdEM7SUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFDaEM7UUFDQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDeEM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUUzQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUMzRTtRQUNDLE9BQU8sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUV2QyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFakIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoQixPQUFPO0tBQ1A7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWxCLCtCQUErQjtJQUUvQixPQUFPLGVBQVEsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFdkMsd0JBQXdCO0FBQ3pCLENBQUMsQ0FBQztLQUNELE9BQU8sRUFBRTtJQUNWLFNBQVM7S0FDUixJQUFJLENBQ0wiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbmltcG9ydCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmltcG9ydCB0eHRNZXJnZSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgUEFDS0FHRV9KU09OID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5pbXBvcnQgdXBkYXRlTm90aWZpZXIgPSByZXF1aXJlKCd1cGRhdGUtbm90aWZpZXInKTtcbmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdkZWJ1Zy1jb2xvcjInO1xuY29uc3QgY29uc29sZSA9IG5ldyBDb25zb2xlKG51bGwsIHtcblx0ZW5hYmxlZDogdHJ1ZSxcblx0aW5zcGVjdE9wdGlvbnM6IHtcblx0XHRjb2xvcnM6IHRydWUsXG5cdH0sXG5cdGNoYWxrT3B0aW9uczoge1xuXHRcdGVuYWJsZWQ6IHRydWUsXG5cdH0sXG59KTtcblxuY29uc29sZS5lbmFibGVkQ29sb3IgPSB0cnVlO1xuXG5jb25zdCBDV0QgPSBwcm9jZXNzLmN3ZCgpO1xuXG51cGRhdGVOb3RpZmllcih7XG5cdHBrZzogUEFDS0FHRV9KU09OLFxufSkubm90aWZ5KCk7XG5cbmxldCBjbGkgPSB5YXJnc1xuXHQuZGVmYXVsdCh7XG5cdFx0Ly9pbnB1dDogcHJvY2Vzcy5jd2QoKSxcblx0fSlcblx0Lm9wdGlvbignaW5wdXQnLCB7XG5cdFx0YWxpYXM6IFsnaSddLFxuXHRcdC8vZGVtYW5kT3B0aW9uOiB0cnVlLFxuXHRcdHJlcXVpcmVzQXJnOiB0cnVlLFxuXHRcdG5vcm1hbGl6ZTogdHJ1ZSxcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRkZXNjOiAnc291cmNlIG5vdmVsIHR4dCBmb2xkZXIgcGF0aCcsXG5cdFx0Lypcblx0XHRkZWZhdWx0OiBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdC8vcmV0dXJuIHByb2Nlc3MuY3dkKCk7XG5cdFx0fSxcblx0XHQqL1xuXHR9KVxuXHQub3B0aW9uKCdvdXRwdXQnLCB7XG5cdFx0YWxpYXM6IFsnbyddLFxuXHRcdC8vZGVtYW5kT3B0aW9uOiB0cnVlLFxuXHRcdHJlcXVpcmVzQXJnOiB0cnVlLFxuXHRcdG5vcm1hbGl6ZTogdHJ1ZSxcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRkZXNjOiAnIG91dHB1dCBwYXRoJyxcblx0XHRkZWZhdWx0OiBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHJldHVybiBDV0Q7XG5cdFx0fSxcblx0fSlcblx0Lm9wdGlvbignemgnLCB7XG5cdFx0Ly9kZWZhdWx0OiB0cnVlLFxuXHRcdGJvb2xlYW46IHRydWUsXG5cdH0pXG5cdC8vIEB0cy1pZ25vcmVcblx0LmNvbW1hbmQoJyQwJywgJycsIGZ1bmN0aW9uICh5YXJncylcblx0e1xuXHRcdGlmICh5YXJncy5hcmd2LnpoKVxuXHRcdHtcblx0XHRcdHlhcmdzLmxvY2FsZSgnemhfQ04nKTtcblx0XHR9XG5cblx0XHRsZXQgaW5wdXRQYXRoID0geWFyZ3MuYXJndi5pbnB1dCB8fCB5YXJncy5hcmd2Ll9bMF0gfHwgQ1dEO1xuXHRcdGxldCBvdXRwdXRQYXRoID0geWFyZ3MuYXJndi5vdXRwdXQ7XG5cblx0XHRpZiAoIXBhdGguaXNBYnNvbHV0ZShpbnB1dFBhdGgpKVxuXHRcdHtcblx0XHRcdGlucHV0UGF0aCA9IHBhdGguam9pbihDV0QsIGlucHV0UGF0aCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFwYXRoLmlzQWJzb2x1dGUob3V0cHV0UGF0aCkpXG5cdFx0e1xuXHRcdFx0b3V0cHV0UGF0aCA9IHBhdGguam9pbihDV0QsIG91dHB1dFBhdGgpO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKGBjdXJyZW50UGF0aDpcXG4gIGAsIGlucHV0UGF0aCk7XG5cdFx0Y29uc29sZS5sb2coYGlucHV0UGF0aDpcXG4gIGAsIGlucHV0UGF0aCk7XG5cdFx0Y29uc29sZS5sb2coYG91dHB1dFBhdGg6XFxuICBgLCBvdXRwdXRQYXRoKTtcblxuXHRcdGlmIChpbnB1dFBhdGguaW5kZXhPZihfX2Rpcm5hbWUpID09IDAgfHwgb3V0cHV0UGF0aC5pbmRleE9mKF9fZGlybmFtZSkgPT0gMClcblx0XHR7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBbRkFJTF0gcGF0aCBub3QgYWxsb3dgKTtcblxuXHRcdFx0eWFyZ3Muc2hvd0hlbHAoKTtcblxuXHRcdFx0cHJvY2Vzcy5leGl0KDEpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coYFxcbmApO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyg2NjYsIHlhcmdzLmFyZ3YpO1xuXG5cdFx0cmV0dXJuIHR4dE1lcmdlKGlucHV0UGF0aCwgb3V0cHV0UGF0aCk7XG5cblx0XHQvL3lhcmdzLnNob3dIZWxwKCdsb2cnKTtcblx0fSlcblx0LnZlcnNpb24oKVxuXHQvLy5oZWxwKClcblx0LmFyZ3ZcbjtcbiJdfQ==